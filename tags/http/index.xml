<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Http on silenceper blog</title>
    <link>https://silenceper.github.io/tags/http/</link>
    <description>Recent content in Http on silenceper blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 28 May 2016 18:00:59 +0800</lastBuildDate>
    
	<atom:link href="https://silenceper.github.io/tags/http/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 中http包默认路由匹配规则阅读笔记</title>
      <link>https://silenceper.github.io/blog/201605/golang-%E4%B8%ADhttp%E5%8C%85%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 28 May 2016 18:00:59 +0800</pubDate>
      
      <guid>https://silenceper.github.io/blog/201605/golang-%E4%B8%ADhttp%E5%8C%85%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>一、执行流程 构建一个简单http server：
package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&amp;quot;hello world&amp;quot;)) }) log.Fatal(http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)) }  使用http://127.0.0.1:8080/ 就可以看到输出了
通过跟踪http.go包代码，可以发现执行流程基本如下：
1.创建一个Listener监听8080端口 2.进入for循环并Accept请求，没有请求则处于阻塞状态 3.接收到请求，并创建一个conn对象，放入goroutine处理（实现高并发关键） 4.解析请求来源信息获得请求路径等重要信息 5.请求ServerHTTP方法，已经通过上一步获得了ResponseWriter和Request对象 func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request) { //此handler即为http.ListenAndServe 中的第二个参数 handler := sh.srv.Handler if handler == nil { //如果handler为空则使用内部的DefaultServeMux 进行处理 handler = DefaultServeMux } if req.RequestURI == &amp;quot;*&amp;quot; &amp;amp;&amp;amp; req.Method == &amp;quot;OPTIONS&amp;quot; { handler = globalOptionsHandler{} } //这里就开始处理http请求 //如果需要使用自定义的mux，就需要实现ServeHTTP方法，即实现Handler接口。 handler.</description>
    </item>
    
  </channel>
</rss>