<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wechat on silenceper</title>
    <link>http://silenceper.com/tags/wechat/</link>
    <description>Recent content in wechat on silenceper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 15:40:59 +0800</lastBuildDate>
    
	<atom:link href="http://silenceper.com/tags/wechat/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开源项目：wechat sdk</title>
      <link>http://silenceper.com/blog/201609/go-wechat-sdk/</link>
      <pubDate>Fri, 16 Sep 2016 15:40:59 +0800</pubDate>
      
      <guid>http://silenceper.com/blog/201609/go-wechat-sdk/</guid>
      <description>一直很想自己用golang写个微信的sdk，目标是简单好用，所以利用闲暇时间（周末，中秋😁），就做出来。 项目地址:https://githu</description>
    </item>
    
    <item>
      <title>Golang 中http包默认路由匹配规则阅读笔记</title>
      <link>http://silenceper.com/blog/201605/go-http-process/</link>
      <pubDate>Sat, 28 May 2016 18:00:59 +0800</pubDate>
      
      <guid>http://silenceper.com/blog/201605/go-http-process/</guid>
      <description>一、执行流程 构建一个简单http server： package main import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&amp;quot;hello world&amp;quot;)) }) log.Fatal(http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)) } 使用http://127.0.0.1:8080/ 就</description>
    </item>
    
  </channel>
</rss>