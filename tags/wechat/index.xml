<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wechat on silenceper</title>
    <link>/tags/wechat/</link>
    <description>Recent content in wechat on silenceper</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 16 Sep 2016 15:40:59 +0800</lastBuildDate>
    
	<atom:link href="/tags/wechat/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>开源项目：wechat sdk</title>
      <link>/blog/201609/go-wechat-sdk/</link>
      <pubDate>Fri, 16 Sep 2016 15:40:59 +0800</pubDate>
      
      <guid>/blog/201609/go-wechat-sdk/</guid>
      <description>一直很想自己用golang写个微信的sdk，目标是简单好用，所以利用闲暇时间（周末，中秋😁），就做出来。 项目地址:https://githu</description>
    </item>
    
    <item>
      <title>Golang中http包默认路由匹配规则阅读笔记</title>
      <link>/blog/201605/go-http-process/</link>
      <pubDate>Sat, 28 May 2016 18:00:59 +0800</pubDate>
      
      <guid>/blog/201605/go-http-process/</guid>
      <description>一、执行流程 构建一个简单http server： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import ( &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { w.Write([]byte(&amp;#34;hello world&amp;#34;)) }) log.Fatal(http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil)) } 使用http://12</description>
    </item>
    
  </channel>
</rss>